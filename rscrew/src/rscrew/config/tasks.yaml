# NOTE: operator_intent_dialogue_task is now handled by interactive_dialogue.py 
# before the CrewAI workflow starts. This ensures proper CLI interaction.

intent_classification_task:
  description: >
    As the Project Orchestrator, analyze the ENHANCED user request (with operator context) to determine intent and route to appropriate workflow:
    
    Enhanced Request: {topic}
    Operator Context: {operator_context}
    Technical Background: {technical_background}
    Project Context: {project_context}
    Complexity Preference: {complexity_preference}
    Q&A Dialogue: {qa_dialogue}
    Unstated Needs: {unstated_needs}
    Execution Context: {execution_context}
    Current Year: {current_year}
    
    Now classify with full operator context into:
    
    1. INFORMATION REQUEST - Operator wants to learn, understand, or get explanations
    2. PLANNING REQUEST - Operator wants strategic advice, recommendations, or planning  
    3. IMPLEMENTATION REQUEST - Operator wants something built, created, or implemented
    
    Consider the operator's experience level, context, and true intentions when classifying.
    Use the operator context to tailor the workflow to their specific needs and preferences.
  expected_output: >
    Enhanced intent classification with operator context:
    
    INTENT: [INFORMATION/PLANNING/IMPLEMENTATION]
    CONFIDENCE: [High/Medium/Low]
    REASONING: Classification reasoning considering operator context
    OPERATOR-AWARE WORKFLOW: [Workflow tailored to operator's needs and experience level]
    
    Route to appropriate workflow with full operator context available to all agents.
    All subsequent agents should consider the operator's technical background, project context, 
    complexity preferences, and identified unstated needs.
  agent: project_orchestrator

project_analysis_task:
  description: >
    As the Project Orchestrator, analyze the user's request and define the project scope:
    
    User Request: {topic}
    Execution Context: {execution_context}
    Current Year: {current_year}
    
    Your responsibilities:
    1. Analyze and understand the complete user requirements
    2. Identify key project objectives and success criteria
    3. Break down the request into manageable components
    4. Identify potential challenges and risks
    5. Define the overall project approach and methodology
    6. Create a high-level project plan with phases
    7. Determine which specialist agents will be needed for each phase
    
    Consider the technical complexity, resource requirements, and deliverable expectations.
  expected_output: >
    A comprehensive project analysis including:
    - Project scope and objectives summary
    - Key requirements breakdown
    - Identified challenges and risk factors
    - Recommended project phases and approach
    - Agent assignment strategy for upcoming tasks
    - Success criteria and quality gates
    Format as a structured project brief that guides the entire development process.
  agent: project_orchestrator

technical_research_task:
  description: >
    As the Technical Research Specialist, conduct comprehensive technical research based on the project analysis:
    
    Project Scope: Review the project orchestrator's analysis
    User Request: {topic}
    Execution Context: {execution_context}
    
    Your responsibilities:
    1. Research relevant technologies, frameworks, and tools
    2. Analyze existing codebase and project structure (if applicable)
    3. Identify technical requirements and constraints
    4. Evaluate potential solutions and approaches
    5. Research best practices and industry standards
    6. Assess technical feasibility and complexity
    7. Identify dependencies and integration requirements
    
    Focus on providing actionable technical insights that will inform the solution design.
  expected_output: >
    A detailed technical research report including:
    - Technology stack recommendations with justifications
    - Analysis of existing code/project structure
    - Technical requirements and constraints
    - Feasibility assessment and complexity analysis
    - Best practices and standards to follow
    - Dependency and integration considerations
    - Risk assessment and mitigation strategies
    Format as a technical brief that informs architectural decisions.
  agent: research_analyst

solution_design_task:
  description: >
    As the Solution Architect, design the technical solution based on project analysis and research:
    
    Project Analysis: Review the orchestrator's project breakdown
    Technical Research: Use the research analyst's findings
    User Request: {topic}
    
    Your responsibilities:
    1. Design overall system architecture and components
    2. Create technical specifications and interfaces
    3. Define data models and database schemas (if needed)
    4. Plan API designs and integration patterns
    5. Specify security and performance requirements
    6. Create implementation roadmap and milestones
    7. Design testing and validation strategies
    
    Ensure the design is scalable, maintainable, and follows best practices.
  expected_output: >
    A comprehensive solution design document including:
    - System architecture diagram and component breakdown
    - Technical specifications and interface definitions
    - Data models and schema designs
    - API specifications and integration plans
    - Security and performance requirements
    - Implementation roadmap with clear milestones
    - Testing and validation strategy
    Format as a detailed technical design that guides implementation.
  agent: solution_architect

implementation_task:
  description: >
    As the Senior Software Developer, implement the designed solution:
    
    Solution Design: Follow the architect's specifications
    Technical Requirements: Use research findings
    User Request: {topic}
    
    Your responsibilities:
    1. Implement the designed solution components
    2. Write clean, efficient, and well-documented code
    3. Follow coding standards and best practices
    4. Implement proper error handling and edge cases
    5. Create unit tests and integration tests
    6. Ensure security best practices are followed
    7. Optimize for performance and maintainability
    
    Focus on creating production-ready code that meets all specifications.
  expected_output: >
    Complete implementation including:
    - All required source code files with proper structure
    - Comprehensive code documentation and comments
    - Unit tests and integration tests
    - Error handling and input validation
    - Security implementations and best practices
    - Performance optimizations where applicable
    - Installation and setup instructions
    Format as ready-to-deploy code with clear documentation.
  agent: code_implementer

quality_assurance_task:
  description: >
    As the Quality Assurance Engineer, review and test the implemented solution:
    
    Implementation: Review the developer's code and tests
    Solution Design: Validate against architectural specifications
    User Request: {topic}
    
    Your responsibilities:
    1. Conduct comprehensive code review for quality and standards
    2. Validate implementation against design specifications
    3. Execute functional and non-functional testing
    4. Verify security implementations and best practices
    5. Test error handling and edge cases
    6. Validate performance and scalability
    7. Ensure comprehensive test coverage
    
    Identify any issues, bugs, or improvements needed before final delivery.
  expected_output: >
    A comprehensive quality assurance report including:
    - Code review findings and recommendations
    - Test execution results and coverage analysis
    - Security validation and compliance check
    - Performance testing results
    - Bug reports and issue tracking
    - Quality metrics and standards compliance
    - Final approval status and remaining actions
    Format as a detailed QA report with clear pass/fail criteria.
  agent: quality_assurance

# Quick Response Tasks (for INFORMATION requests)
research_task:
  description: >
    As the Technical Research Specialist, provide comprehensive information and analysis:
    
    User Request: {topic}
    Execution Context: {execution_context}
    Current Year: {current_year}
    
    The user is seeking information, explanations, or understanding. Provide:
    1. Clear, accurate explanations of concepts or technologies
    2. Comparisons and trade-offs when relevant
    3. Current best practices and industry standards
    4. Practical examples and use cases
    5. Relevant context and background information
    6. Actionable insights and recommendations
    
    Focus on being informative, educational, and directly addressing what the user wants to know.
  expected_output: >
    Comprehensive informational response including:
    - Direct answers to the user's questions
    - Clear explanations with examples
    - Relevant comparisons and context
    - Current best practices and standards
    - Practical insights and recommendations
    Format as clear, well-organized information that educates and informs.
  agent: research_analyst

information_response_task:
  description: >
    As the Technical Documentation Specialist, create a polished informational response:
    
    Research Findings: Use the research analyst's comprehensive analysis
    User Request: {topic}
    
    Create a final response that:
    1. Directly answers the user's question in clear language
    2. Organizes information in a logical, easy-to-follow structure
    3. Includes practical examples and actionable insights
    4. Provides additional resources or next steps if helpful
    5. Uses appropriate formatting for readability
    
    This is an informational response, not implementation documentation.
  expected_output: >
    A clear, well-structured informational response that:
    - Directly addresses the user's question
    - Provides comprehensive yet concise information
    - Includes practical examples and insights
    - Is formatted for easy reading and understanding
    - Offers actionable next steps where appropriate
    Format as clear markdown without code block markers.
  agent: technical_writer

# Full Development Tasks (for IMPLEMENTATION requests)
documentation_task:
  description: >
    As the Technical Documentation Specialist, create comprehensive documentation:
    
    Implementation: Document the developer's code and architecture
    QA Results: Include testing and quality findings
    Solution Design: Document the architectural decisions
    User Request: {topic}
    
    Your responsibilities:
    1. Create comprehensive API documentation
    2. Write user guides and tutorials
    3. Document system architecture and design decisions
    4. Create installation and deployment guides
    5. Write troubleshooting and maintenance documentation
    6. Document testing procedures and quality standards
    7. Create developer onboarding documentation
    
    Ensure documentation is clear, accurate, and useful for all stakeholders.
  expected_output: >
    Complete documentation package including:
    - API documentation with examples and usage
    - User guides and step-by-step tutorials
    - System architecture and design documentation
    - Installation, deployment, and configuration guides
    - Troubleshooting and FAQ documentation
    - Developer documentation and code comments
    - Testing and quality assurance procedures
    Format as professional documentation ready for end users and developers.
  agent: technical_writer

# Flag-Based Planning System Tasks

plan_generation_task:
  description: >
    Generate a comprehensive implementation plan based on the user request:
    
    User Request: {topic}
    Execution Context: {execution_context}
    Current Year: {current_year}
    
    Create a detailed implementation plan that includes:
    1. Executive Summary - What will be built (high-level overview)
    2. Technical Architecture - System design, technologies, frameworks
    3. Implementation Roadmap - Step-by-step plan with milestones and phases
    4. Resource Requirements - Dependencies, tools, libraries needed
    5. Risk Assessment - Potential issues and mitigation strategies
    6. Success Criteria - How to measure completion and success
    7. File Structure - Proposed directory/file organization
    8. Implementation Notes - Additional context for implementation crew
    
    Format as structured markdown that can be easily reviewed and used by implementation crew.
  expected_output: >
    # Implementation Plan: [Project Title]
    
    ## Executive Summary
    [What will be built - high level overview]
    
    ## Technical Architecture  
    [System design, technologies, frameworks]
    
    ## Implementation Roadmap
    [Step-by-step plan with milestones]
    - [ ] Phase 1: Setup and foundation
    - [ ] Phase 2: Core functionality  
    - [ ] Phase 3: Testing and refinement
    
    ## Resource Requirements
    [Dependencies, tools, libraries needed]
    
    ## Risk Assessment
    [Potential issues and mitigation strategies]
    
    ## Success Criteria
    [How to measure completion and success]
    
    ## File Structure
    [Proposed directory/file organization]
    
    ## Implementation Notes
    [Additional context for the implementation crew]
  agent: solution_architect

plan_based_implementation_task:
  description: >
    Implement the project according to the provided implementation plan:
    
    Implementation Plan: {implementation_plan}
    User Request: {topic}
    
    Follow the plan specifications exactly:
    1. Use the specified technical architecture and technologies
    2. Follow the implementation roadmap and phases
    3. Create the proposed file structure
    4. Implement all features and requirements outlined in the plan
    5. Follow the resource requirements and dependencies
    6. Address the identified risks and mitigation strategies
    7. Ensure the success criteria can be met
    
    Create production-ready code that matches the plan specifications.
  expected_output: >
    Complete implementation based on the plan including:
    - All source code files following the planned structure
    - Implementation of all features specified in the plan
    - Proper error handling and input validation
    - Security implementations as outlined in the plan
    - Performance optimizations where specified
    - Installation and setup instructions
    - Code documentation and comments
    Format as ready-to-deploy code matching the implementation plan.
  agent: code_implementer

plan_assessment_task:
  description: >
    Assess the feasibility and impact of a requested plan change:
    
    Current Plan: {current_plan}
    Requested Change: {user_request}
    Change Type: {change_type}
    
    Provide a comprehensive assessment including:
    1. Feasibility analysis - Is this change technically possible and practical?
    2. Impact assessment - What parts of the plan will be affected?
    3. Technical considerations - What technical implications does this have?
    4. Resource implications - How does this affect dependencies and requirements?
    5. Risk analysis - What new risks does this introduce?
    6. Recommendations - Should this change be made? Any alternatives?
    7. Implementation approach - How should this change be integrated?
    
    Be thorough but concise in your assessment.
  expected_output: >
    ASSESSMENT: [Feasibility and recommendations]
    
    IMPACT: [What parts of the plan will be affected]
    
    CONSIDERATIONS: [Technical implications and requirements]
    
    RISKS: [New risks and mitigation strategies]
    
    RECOMMENDATIONS: [Whether to proceed and any alternatives]
    
    IMPLEMENTATION_APPROACH: [How to integrate this change]
  agent: plan_update_coordinator

plan_update_task:
  description: >
    Update the implementation plan based on the assessment and user request:
    
    Current Plan: {current_plan}
    Assessment Results: {assessment_results}
    Requested Change: {user_request}
    
    Update the plan to incorporate the requested change while:
    1. Maintaining consistency across all sections
    2. Preserving existing content that isn't affected
    3. Updating all relevant sections that are impacted
    4. Ensuring technical coherence and feasibility
    5. Maintaining the same markdown structure and format
    6. Adding new requirements or dependencies as needed
    
    Only modify the sections that need to change based on the request.
  expected_output: >
    Updated implementation plan in the same markdown format with:
    - Modified sections reflecting the requested changes
    - Updated technical architecture if needed
    - Revised implementation roadmap if phases changed
    - Updated resource requirements and dependencies
    - Revised risk assessment with new considerations
    - Maintained consistency across all sections
    Format as complete implementation plan ready for review.
  agent: plan_update_coordinator
